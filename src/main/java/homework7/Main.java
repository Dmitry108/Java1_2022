package homework7;

/* 1. Расширить задачу про котов и тарелки с едой.
   2. Сделать так, чтобы в тарелке с едой не могло получиться отрицательного количества еды
        (например, в миске 10 еды, а кот пытается покушать 15-20).
   3. Каждому коту нужно добавить поле сытость (когда создаем котов, они голодны). Если коту удалось покушать
        (хватило еды), сытость = true.
   4. Считаем, что если коту мало еды в тарелке, то он её просто не трогает, то есть не может быть наполовину сыт
        (это сделано для упрощения логики программы).
   5. Создать массив котов и тарелку с едой, попросить всех котов покушать из этой тарелки и потом вывести информацию
        о сытости котов в консоль.
   6. Добавить в тарелку метод, с помощью которого можно было бы добавлять еду в тарелку.
*/

public class Main {
    public static void main(String[] args) {
        final Cat[] cats = {
                new Cat("Барсик"),
                new Cat("Мурзик"),
                new Cat("Бонифаций"),
                new Cat("Мурка"),
                new Cat("Пафнутий")
        };

        final Plate plate = new Plate(20);
        plate.fillWhole();

        /* НЕ СМОГ ОСТАНОВИТЬСЯ)
            коты едят в реальном времени, у них постоянно уменьшается уровень сытости и они могут проголодаться,
            тогда они вынуждены снова подходить к тарелке в поисках пропитания)) Если там мало еды, они наблюдают
            за тарелкой и ждут, когда там появится еда)

            Пытался, но не смог избежать многопоточности для остчета времени
        */
        new Thread(() -> {
            try {
                while (true) {
                    Thread.sleep(3000L);
                    for (Cat cat : cats) {
                        cat.decrementSatiety();
                    }
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }).start();

        new Thread(() -> {
            try {
                while (true) {
                    Thread.sleep(7000L);
                    plate.addSomeFood((int) (Math.random() * plate.getVolume()));
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }).start();

        for (Cat cat : cats) {
            cat.tryToEat(plate);
        }
    }
}